{"version":3,"sources":["components/GeoMap.js","useResizeObserver.js","App.js","index.js"],"names":["GeoMap","data","code","cases","property","wrapperRef","useRef","svgRef","dimensions","ref","useState","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","selectedDepartment","setSelectedDepartment","svg","select","minProp","min","dep","maxProp","max","console","log","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","features","join","on","feature","attr","transition","properties","text","id","report","reverse","filter","department_number","nom","hosp","rad","rea","dc","geoPoint2D","map","lon","lat","points","geometry","coordinates","polygon","pair","length","point","className","client","ApolloClient","uri","departmentsQuery","gql","departmentQuery","App","departmentNumber","setDepartmentNumber","setProperty","query","loading","error","style","background","border","margin","padding","value","onChange","e","target","disabled","departments","department","index","key","variables","cellPadding","cellSpacing","align","sort","a","b","date","localeCompare","bgcolor","placeSelf","geoData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4def2f2.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\n\nconst GeoMap = ({ data, code, cases, property }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(cases, (dep) => dep[property]);\n    const maxProp = max(cases, (dep) => dep[property]);\n    console.log(minProp, maxProp);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoMercator()\n      .fitSize([width, height], selectedDepartment || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll('.department')\n      .data(data.features)\n      .join('path')\n      .on('click', (feature) => {\n        console.log(feature);\n        setSelectedDepartment(selectedDepartment === feature ? null : feature);\n      })\n      .attr('class', 'department')\n      .transition()\n      .attr('fill', (feature) =>\n        feature.properties.code === code ? 'red' : 'lightgrey'\n      )\n      .attr('d', (feature) => pathGenerator(feature));\n\n    svg\n      .selectAll('.label')\n      .data([selectedDepartment])\n      .join('text')\n      .attr('class', 'label')\n      .transition()\n      .text((feature) => {\n        if (feature) {\n          const id = feature.properties.code;\n          const report = cases.reverse().filter((dep) => {\n            return dep.department_number === id;\n          })[0];\n          console.log(report);\n          return (\n            feature &&\n            feature.properties.nom +\n              ' ' +\n              ' - hosp: ' +\n              report.hosp +\n              ' - rad: ' +\n              report.rad +\n              ' - rea: ' +\n              report.rea +\n              ' - dc: ' +\n              report.dc\n          );\n        }\n      })\n      .attr('x', 10)\n      .attr('y', 25);\n\n    // calculate longitude and latitude of each department\n    const geoPoint2D = data.features.map((feature) => {\n      let lon = 0;\n      let lat = 0;\n      let points = 0;\n      feature.geometry.coordinates.forEach((polygon) => {\n        polygon.forEach((pair) => {\n          if (pair.length !== 2) {\n            pair.forEach((point) => {\n              lon += point[0];\n              lat += point[1];\n              points++;\n            });\n          } else {\n            lon += pair[0];\n            lat += pair[1];\n            points++;\n          }\n        });\n      });\n      return {\n        code: feature.properties.code,\n        point: [lon / points, lat / points],\n      };\n    });\n\n    // draw circles for each department\n    svg\n      .selectAll('.circle')\n      .data(geoPoint2D)\n      .join('circle')\n      .attr('class', 'circle')\n      .attr('cx', (feature) => projection(feature.point)[0])\n      .attr('cy', (feature) => projection(feature.point)[1])\n      .transition()\n      .attr('r', (feature) => {\n        if (property) {\n          const id = feature.code;\n          const r = cases.reverse().filter((dep) => {\n            return dep.department_number === id;\n          })[0][property];\n          return (100 * r) / maxProp;\n        } else return 0;\n      })\n      .attr('translate', 'transform(-50%, -50%)')\n      .attr('fill', 'blue')\n      .attr('opacity', 0.2);\n  }, [data, code, dimensions, selectedDepartment, property]);\n\n  return (\n    <div className='wrapper' ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default GeoMap;\n","import { useState, useEffect } from 'react';\n\nexport default (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import React, { useState } from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport GeoMap from './components/GeoMap';\nimport geoData from './departements.geo.json';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst departmentsQuery = gql`\n  query DepartmentsQuery {\n    departments {\n      department_number\n      hosp\n      rea\n      rad\n      dc\n      date\n    }\n  }\n`;\n\nconst departmentQuery = gql`\n  query DepartmentQuery($department_number: ID!) {\n    department(department_number: $department_number) {\n      date\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nfunction App() {\n  const [departmentNumber, setDepartmentNumber] = useState('');\n  const [property, setProperty] = useState('');\n  return (\n    <ApolloProvider client={client}>\n      <div className='container'>\n        <div className='header'>\n          <h1>COVID France API</h1>\n          <Query query={departmentsQuery}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>loading...</p>;\n              if (error) console.log(error);\n              return (\n                <select\n                  style={{\n                    background: 'none',\n                    border: 'solid 2px black',\n                    margin: '24px',\n                    padding: '4px 16px',\n                  }}\n                  value={departmentNumber}\n                  onChange={(e) => setDepartmentNumber(e.target.value)}\n                >\n                  <option value='' disabled>\n                    Choose a department\n                  </option>\n                  {data &&\n                    data.departments.map((department, index) => (\n                      <option value={department.department_number} key={index}>\n                        {department.department_number}\n                      </option>\n                    ))}\n                </select>\n              );\n            }}\n          </Query>\n        </div>\n        <div className='table-wrapper'>\n          {departmentNumber ? (\n            <Query\n              query={departmentQuery}\n              variables={{ department_number: departmentNumber }}\n            >\n              {({ loading, error, data }) => {\n                if (loading) return <p>loading...</p>;\n                if (error) console.log(error);\n                return (\n                  <table\n                    cellPadding='4px'\n                    border='1'\n                    cellSpacing='0'\n                    align='center'\n                  >\n                    <thead align='center'>\n                      <tr>\n                        <td>Date</td>\n                        <td>Hospitalisations</td>\n                        <td>Réanimations</td>\n                        <td>Retour à domicile</td>\n                        <td>Décès</td>\n                      </tr>\n                    </thead>\n                    <tbody align='center'>\n                      {data &&\n                        data.department\n                          .sort((a, b) => a.date.localeCompare(b.date))\n                          .reverse()\n                          .map((entry, index) => (\n                            <tr\n                              key={index}\n                              bgcolor={index % 2 === 0 ? 'white' : 'lightgrey'}\n                            >\n                              <td>{entry.date}</td>\n                              <td>{entry.hosp}</td>\n                              <td>{entry.rea}</td>\n                              <td>{entry.rad}</td>\n                              <td>{entry.dc}</td>\n                            </tr>\n                          ))}\n                    </tbody>\n                  </table>\n                );\n              }}\n            </Query>\n          ) : null}\n        </div>\n        <select\n          value={property}\n          onChange={(e) => setProperty(e.target.value)}\n          style={{\n            background: 'none',\n            border: 'solid 2px black',\n            margin: '24px',\n            padding: '4px 16px',\n            placeSelf: 'center center',\n          }}\n        >\n          <option value='' disabled>\n            Select a property\n          </option>\n          <option value='hosp'>Hospitalisations</option>\n          <option value='rad'>Retour à domicile</option>\n          <option value='rea'>Réanimations</option>\n          <option value='dc'>Décès</option>\n        </select>\n        <div className='map'>\n          <Query query={departmentsQuery}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>loading...</p>;\n              if (error) console.log(error);\n              return (\n                <GeoMap\n                  data={geoData}\n                  code={departmentNumber}\n                  cases={data.departments}\n                  property={property}\n                />\n              );\n            }}\n          </Query>\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}