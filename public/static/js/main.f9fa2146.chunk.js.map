{"version":3,"sources":["components/GeoMap.js","useResizeObserver.js","App.js","index.js"],"names":["GeoMap","lastDay","code","cases","property","formatDate","date","setDate","wrapperRef","useRef","svgRef","dimensions","ref","useState","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","selectedDepartment","setSelectedDepartment","length","firstDay","Date","svg","select","maxProp","max","dep","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","data","precision","pathGenerator","geoPath","selectAll","features","join","on","feature","attr","transition","properties","style","text","id","report","filter","department_number","toDateString","console","log","nom","hosp","rea","rad","dc","geopoint2d","r","Math","sqrt","beds","className","display","flexDirection","alignItems","padding","type","min","value","onChange","e","days","target","getDate","departmentsQuery","gql","departmentListQuery","dailyReportQuery","departmentQuery","App","departmentNumber","setDepartmentNumber","setProperty","useQuery","variables","dd","mm","getMonth","getFullYear","dateToString","loading","error","reportLoading","reportData","Container","maxWidth","Row","Col","Card","Table","Spinner","reduce","total","background","border","placeSelf","disabled","departments","includes","b","split","query","map","department","key","align","sort","a","localeCompare","reverse","index","client","ApolloClient","uri","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f9fa2146.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from \"../useResizeObserver\";\nimport data from \"../departments.geo.json\";\n\nconst GeoMap = ({ code, cases, property, formatDate, date, setDate }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n  let [firstDay, lastDay] = [\n    formatDate(cases[0].date),\n    formatDate(cases[cases.length - 1].date),\n  ];\n\n  lastDay = new Date(\"2020-06-25\");\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    // const minProp = min(cases, (dep) => dep[property]);\n    const maxProp = max(cases, (dep) => dep[property]);\n\n    const colorScale = scaleLinear()\n      .domain([0, 1, 2])\n      .range([\"#2ecc71\", \"#c23616\"]);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoMercator()\n      .fitSize([width, height], selectedDepartment || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    // draw the map\n    svg\n      .selectAll(\".department\")\n      .data(data.features)\n      .join(\"path\")\n      .on(\"click\", (feature) => {\n        setSelectedDepartment(selectedDepartment === feature ? null : feature);\n      })\n      .attr(\"class\", \"department\")\n      .transition()\n      .attr(\"fill\", (feature) =>\n        feature.properties.code === code ? \"#4455ab\" : \"#d1d5ea\"\n      )\n      .attr(\"stroke\", \"rgb(188, 192, 211)\")\n      .style(\"opacity\", 0.8)\n      .attr(\"d\", (feature) => pathGenerator(feature));\n\n    // add labels\n    svg\n      .selectAll(\".label\")\n      .data([selectedDepartment])\n      .join(\"div\")\n      // .append('div')\n      .attr(\"class\", \"label\")\n      .transition()\n      .text((feature) => {\n        if (feature) {\n          const id = feature.properties.code;\n          const report = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              formatDate(dep.date).toDateString() === date.toDateString()\n            );\n          })[0];\n          console.log(report);\n          return (\n            feature &&\n            feature.properties.nom +\n              \" \" +\n              \" - hosp: \" +\n              report.hosp +\n              \" - rea: \" +\n              report.rea +\n              \" - rad: \" +\n              report.rad +\n              \" - dc: \" +\n              report.dc\n          );\n        }\n      });\n    // .attr('x', 10)\n    // .attr('y', 25);\n\n    // draw circles for each department\n    svg\n      .selectAll(\".circle\")\n      .data(data.features)\n      .join(\"circle\")\n      .attr(\"class\", \"circle\")\n      .attr(\"cx\", (feature) => projection(feature.properties.geopoint2d)[0])\n      .attr(\"cy\", (feature) => projection(feature.properties.geopoint2d)[1])\n      .style(\"cursor\", \"pointer\")\n      .on(\"click\", (feature) => {\n        setSelectedDepartment(selectedDepartment === feature ? null : feature);\n      })\n      .transition()\n      .attr(\"r\", (feature) => {\n        if (property) {\n          const id = feature.properties.code;\n          const r = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              formatDate(dep.date).toDateString() === date.toDateString()\n            );\n          })[0][property];\n          return Math.sqrt((2000 * r) / maxProp);\n        } else return 0;\n      })\n      .attr(\"translate\", \"transform(-50%, -50%)\")\n      .attr(\"fill\", (feature) => {\n        if (property !== \"rad\" && property !== \"dc\") {\n          const id = feature.properties.code;\n          const r = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              formatDate(dep.date).toDateString() === date.toDateString()\n            );\n          })[0][property];\n          return colorScale(r / feature.properties.beds);\n        } else {\n          return property === \"dc\" ? \"#2980b9\" : \"#27ae60\";\n        }\n      })\n      .style(\"opacity\", 0.4);\n  }, [data, date, code, dimensions, selectedDepartment, property]);\n\n  return (\n    <div className=\"map-content\">\n      <div className=\"wrapper\" ref={wrapperRef}>\n        <svg ref={svgRef}></svg>\n      </div>\n      <div\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          alignItems: \"center\",\n          padding: \"16px\",\n        }}\n      >\n        <label>{date.toDateString()}</label>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          value={((date - firstDay) * 100) / (lastDay - firstDay)}\n          onChange={(e) => {\n            const days =\n              ((e.target.value / 100) * (lastDay - firstDay)) / 86400000;\n            let date = new Date(firstDay);\n            date.setDate(date.getDate() + days);\n            setDate(date);\n          }}\n        />\n        <small>\n          <i>\n            {property === \"hosp\"\n              ? \"rouge: capacité hospitalière excédée / vert: capacité hospitalière respectée\"\n              : null}\n          </i>\n        </small>\n      </div>\n    </div>\n  );\n};\n\nexport default GeoMap;\n","import { useState, useEffect } from 'react';\n\nexport default (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { gql } from \"apollo-boost\";\nimport { Query, useQuery, useLazyQuery } from \"react-apollo\";\nimport GeoMap from \"./components/GeoMap\";\nimport {\n  Container,\n  Row,\n  Col,\n  Spinner,\n  Table,\n  Card,\n  CardTitle,\n  CardBody,\n} from \"reactstrap\";\nimport {\n  FaSkullCrossbones as Skull,\n  FaHandHoldingHeart as Heart,\n  FaHeartbeat as Heartbeat,\n} from \"react-icons/fa\";\nimport \"./App.css\";\n\nconst departmentsQuery = gql`\n  query DepartmentsQuery {\n    departments {\n      department_number\n      hosp\n      rea\n      rad\n      dc\n      date\n    }\n  }\n`;\n\nconst departmentListQuery = gql`\n  query DepartmentsQuery {\n    date(date: \"2020-06-25\") {\n      department_number\n    }\n  }\n`;\n\nconst dailyReportQuery = gql`\n  query DailyReportQuery($date: String!) {\n    date(date: $date) {\n      department_number\n      hosp\n      rea\n      rad\n      dc\n      date\n    }\n  }\n`;\n\nconst departmentQuery = gql`\n  query DepartmentQuery($department_number: ID!) {\n    department(department_number: $department_number) {\n      date\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nfunction App() {\n  const formatDate = (date) => {\n    if (date.includes(\"/\")) {\n      const b = date.split(\"/\");\n      return new Date(`${b[2]}-${b[1]}-${b[0]}`);\n    } else {\n      return new Date(date);\n    }\n  };\n\n  const dateToString = (date) => {\n    var dd = date.getDate();\n\n    var mm = date.getMonth() + 1;\n    var yyyy = date.getFullYear();\n    if (dd < 10) {\n      dd = \"0\" + dd;\n    }\n\n    if (mm < 10) {\n      mm = \"0\" + mm;\n    }\n    return yyyy + \"-\" + mm + \"-\" + dd;\n  };\n\n  const [departmentNumber, setDepartmentNumber] = useState(\"\");\n  const [property, setProperty] = useState(\"\");\n  const [date, setDate] = useState(new Date(\"2020-06-29\"));\n  const { loading, data, error } = useQuery(dailyReportQuery, {\n    variables: { date: dateToString(date) },\n  });\n\n  const {\n    loading: reportLoading,\n    data: reportData,\n    error: reportError,\n  } = useQuery(departmentsQuery);\n\n  return (\n    <div className=\"app-container\">\n      <Container style={{ maxWidth: \"none\" }}>\n        <Row className=\"p-3\">\n          <Col>\n            <h1>COVID France API</h1>\n          </Col>\n        </Row>\n        {/* <Row className=\"p-3\">\n          <Col>\n            <Card className=\"p-3\">\n              <CardTitle className=\"text-center\">\n                Nb Total Cas\n                <Heartbeat />\n              </CardTitle>\n              <CardBody className=\"text-center\">\n                {loading ? (\n                  <Spinner />\n                ) : data ? (\n                  data.date.reduce((total, dep) => total + dep.hosp, 0)\n                ) : null}\n              </CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card className=\"p-3\">\n              <CardTitle className=\"text-center\">\n                Nb Total Décès\n                <Skull />\n              </CardTitle>\n              <CardBody className=\"text-center\">{12000}</CardBody>\n            </Card>\n          </Col>\n          <Col>\n            <Card className=\"p-3\">\n              <CardTitle className=\"text-center\">\n                Nb Total Rétabli\n                <Heart />\n              </CardTitle>\n              <CardBody className=\"text-center\">{12000}</CardBody>\n            </Card>\n          </Col>\n        </Row> */}\n        <Row className=\"p-3\">\n          <Col>\n            <Card className=\"p-3\">\n              <Row>\n                <Col className=\"p-4\">\n                  <Table>\n                    <thead>\n                      <h3>Total au {date.toDateString()}</h3>\n                    </thead>\n                    <tbody>\n                      <tr>\n                        <td>Hospitalisations</td>\n                        <td>\n                          {loading ? (\n                            <Spinner />\n                          ) : data ? (\n                            data.date.reduce(\n                              (total, dep) => total + dep.hosp,\n                              0\n                            )\n                          ) : null}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Retour à domicile (cumulés)</td>\n                        <td>\n                          {loading ? (\n                            <Spinner />\n                          ) : data ? (\n                            data.date.reduce((total, dep) => total + dep.rad, 0)\n                          ) : null}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Réanimations</td>\n                        <td>\n                          {loading ? (\n                            <Spinner />\n                          ) : data ? (\n                            data.date.reduce((total, dep) => total + dep.rea, 0)\n                          ) : null}\n                        </td>\n                      </tr>\n                      <tr>\n                        <td>Décès (cumulés)</td>\n                        <td>\n                          {loading ? (\n                            <Spinner />\n                          ) : data ? (\n                            data.date.reduce((total, dep) => total + dep.dc, 0)\n                          ) : null}\n                        </td>\n                      </tr>\n                    </tbody>\n                  </Table>\n                </Col>\n                <Col>\n                  <Container className=\"p-4 text-center\">\n                    <select\n                      value={property}\n                      onChange={(e) => setProperty(e.target.value)}\n                      style={{\n                        background: \"none\",\n                        border: \"solid 2px black\",\n                        padding: \"4px 16px\",\n                        placeSelf: \"center center\",\n                      }}\n                    >\n                      <option value=\"\" disabled>\n                        Select a property\n                      </option>\n                      <option value=\"hosp\">Hospitalisations</option>\n                      <option value=\"rad\">Retour à domicile</option>\n                      <option value=\"rea\">Réanimations</option>\n                      <option value=\"dc\">Décès</option>\n                    </select>\n                  </Container>\n                  {reportLoading ? (\n                    <Spinner />\n                  ) : reportData ? (\n                    <GeoMap\n                      code={departmentNumber}\n                      cases={reportData.departments}\n                      property={property}\n                      formatDate={formatDate}\n                      date={date}\n                      setDate={setDate}\n                    />\n                  ) : null}\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"p-3\">\n          <Col>\n            <Card className=\"p-3\">\n              <Query query={departmentListQuery}>\n                {({ loading, error, data }) => {\n                  if (loading) return <Spinner />;\n                  if (error) console.log(error);\n                  return (\n                    <select\n                      style={{\n                        background: \"none\",\n                        border: \"solid 2px black\",\n                        padding: \"4px 16px\",\n                      }}\n                      value={departmentNumber}\n                      onChange={(e) => setDepartmentNumber(e.target.value)}\n                    >\n                      <option value=\"\" disabled>\n                        Choose a department\n                      </option>\n                      {data &&\n                        data.date.map((department) => (\n                          <option\n                            value={department.department_number}\n                            key={department.department_number}\n                          >\n                            {department.department_number}\n                          </option>\n                        ))}\n                    </select>\n                  );\n                }}\n              </Query>\n              {departmentNumber ? (\n                <Query\n                  query={departmentQuery}\n                  variables={{ department_number: departmentNumber }}\n                >\n                  {({ loading, error, data }) => {\n                    if (loading) return <Spinner />;\n                    if (error) console.log(error);\n                    return (\n                      <Container className=\"p-4\">\n                        <Table>\n                          <thead align=\"center\">\n                            <tr>\n                              <td>Date</td>\n                              <td>Hospitalisations</td>\n                              <td>Réanimations</td>\n                              <td>Retour à domicile (cumulés)</td>\n                              <td>Décès (cumulés)</td>\n                            </tr>\n                          </thead>\n                          <tbody align=\"center\">\n                            {data &&\n                              data.department\n                                .sort((a, b) => a.date.localeCompare(b.date))\n                                .reverse()\n                                .map((entry, index) => (\n                                  <tr key={index}>\n                                    <td>{entry.date}</td>\n                                    <td>{entry.hosp}</td>\n                                    <td>{entry.rea}</td>\n                                    <td>{entry.rad}</td>\n                                    <td>{entry.dc}</td>\n                                  </tr>\n                                ))}\n                          </tbody>\n                        </Table>\n                      </Container>\n                    );\n                  }}\n                </Query>\n              ) : null}\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}