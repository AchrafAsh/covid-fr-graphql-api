{"version":3,"sources":["components/GeoMap.js","useResizeObserver.js","App.js","index.js"],"names":["GeoMap","data","code","wrapperRef","useRef","svgRef","dimensions","ref","useState","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","useResizeObserver","selectedDepartment","setSelectedDepartment","svg","select","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","features","join","on","feature","attr","transition","properties","text","nom","className","client","ApolloClient","uri","getDepartmentsQuery","gql","departmentQuery","App","departmentNumber","setDepartmentNumber","query","loading","error","console","log","style","background","border","margin","padding","value","onChange","e","target","disabled","departments","map","department","index","department_number","key","variables","cellPadding","cellSpacing","align","sort","a","b","date","localeCompare","reverse","bgcolor","hosp","rea","rad","dc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1bebdd1e.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\n\nconst GeoMap = ({ data, code }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoMercator()\n      .fitSize([width, height], selectedDepartment || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll('.department')\n      .data(data.features)\n      .join('path')\n      .on('click', (feature) =>\n        setSelectedDepartment(selectedDepartment === feature ? null : feature)\n      )\n      .attr('class', 'department')\n      .transition()\n      .attr('fill', (feature) =>\n        feature.properties.code === code ? 'red' : 'lightgrey'\n      )\n      .attr('d', (feature) => pathGenerator(feature));\n\n    svg\n      .selectAll('.label')\n      .data([selectedDepartment])\n      .join('text')\n      .attr('class', 'label')\n      .transition()\n      .text((feature) => feature && feature.properties.nom)\n      .attr('x', 10)\n      .attr('y', 25);\n  }, [data, code, dimensions, selectedDepartment]);\n\n  return (\n    <div className='wrapper' ref={wrapperRef}>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n};\n\nexport default GeoMap;\n","import { useState, useEffect } from 'react';\n\nexport default (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import React, { useState } from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport GeoMap from './components/GeoMap';\nimport data from './departements.geo.json';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst getDepartmentsQuery = gql`\n  query DepartmentsQuery {\n    departments {\n      department_number\n    }\n  }\n`;\n\nconst departmentQuery = gql`\n  query DepartmentQuery($department_number: ID!) {\n    department(department_number: $department_number) {\n      date\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nfunction App() {\n  const [departmentNumber, setDepartmentNumber] = useState('');\n  return (\n    <ApolloProvider client={client}>\n      <div className='container'>\n        <div className='header'>\n          <h1>COVID France API</h1>\n          <Query query={getDepartmentsQuery}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>loading...</p>;\n              if (error) console.log(error);\n              return (\n                <select\n                  style={{\n                    background: 'none',\n                    border: 'solid 2px black',\n                    margin: '24px',\n                    padding: '4px 16px',\n                  }}\n                  value={departmentNumber}\n                  onChange={(e) => setDepartmentNumber(e.target.value)}\n                >\n                  <option value='' disabled>\n                    Choose a department\n                  </option>\n                  {data &&\n                    data.departments.map((department, index) => (\n                      <option value={department.department_number} key={index}>\n                        {department.department_number}\n                      </option>\n                    ))}\n                </select>\n              );\n            }}\n          </Query>\n        </div>\n        <div className='table-wrapper'>\n          {departmentNumber ? (\n            <Query\n              query={departmentQuery}\n              variables={{ department_number: departmentNumber }}\n            >\n              {({ loading, error, data }) => {\n                if (loading) return <p>loading...</p>;\n                if (error) console.log(error);\n                return (\n                  <table\n                    cellPadding='4px'\n                    border='1'\n                    cellSpacing='0'\n                    align='center'\n                  >\n                    <thead align='center'>\n                      <tr>\n                        <td>Date</td>\n                        <td>Hospitalisations</td>\n                        <td>Réanimations</td>\n                        <td>Retour à domicile</td>\n                        <td>Décès</td>\n                      </tr>\n                    </thead>\n                    <tbody align='center'>\n                      {data &&\n                        data.department\n                          .sort((a, b) => a.date.localeCompare(b.date))\n                          .reverse()\n                          .map((entry, index) => (\n                            <tr\n                              key={index}\n                              bgcolor={index % 2 === 0 ? 'white' : 'lightgrey'}\n                            >\n                              <td>{entry.date}</td>\n                              <td>{entry.hosp}</td>\n                              <td>{entry.rea}</td>\n                              <td>{entry.rad}</td>\n                              <td>{entry.dc}</td>\n                            </tr>\n                          ))}\n                    </tbody>\n                  </table>\n                );\n              }}\n            </Query>\n          ) : null}\n        </div>\n        <div className='map'>\n          <GeoMap data={data} code={departmentNumber} />\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}