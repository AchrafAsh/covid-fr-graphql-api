{"version":3,"sources":["App.js","index.js"],"names":["client","ApolloClient","uri","getDepartmentsQuery","gql","departmentQuery","App","useState","departmentNumber","setDepartmentNumber","className","query","loading","error","data","console","log","style","background","border","margin","padding","value","onChange","e","target","disabled","departments","map","department","index","department_number","key","variables","cellPadding","cellSpacing","align","sort","a","b","date","localeCompare","reverse","entry","bgcolor","hosp","rea","rad","dc","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"soBAMA,IAAMA,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAGDC,EAAsBC,YAAH,KAQnBC,EAAkBD,YAAH,KAgGNE,MApFf,WAAgB,IAAD,EACmCC,mBAAS,IAD5C,mBACNC,EADM,KACYC,EADZ,KAEb,OACE,kBAAC,IAAD,CAAgBT,OAAQA,GACtB,yBAAKU,UAAU,OACb,gDAEA,kBAAC,IAAD,CAAOC,MAAOR,IACX,YAA+B,IAA5BS,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,0CAChBC,GAAOE,QAAQC,IAAIH,GAErB,4BACEI,MAAO,CACLC,WAAY,OACZC,OAAQ,kBACRC,OAAQ,OACRC,QAAS,YAEXC,MAAOd,EACPe,SAAU,SAACC,GAAD,OAAOf,EAAoBe,EAAEC,OAAOH,SAE9C,4BAAQA,MAAM,GAAGI,UAAQ,GAAzB,uBAGCZ,GACCA,EAAKa,YAAYC,KAAI,SAACC,EAAYC,GAAb,OACnB,4BAAQR,MAAOO,EAAWE,kBAAmBC,IAAKF,GAC/CD,EAAWE,2BAO1B,6BACGvB,EACC,kBAAC,IAAD,CACEG,MAAON,EACP4B,UAAW,CAAEF,kBAAmBvB,KAE/B,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KAClB,OAAIF,EAAgB,0CAChBC,GAAOE,QAAQC,IAAIH,GAErB,2BAAOqB,YAAY,IAAIC,YAAY,IAAIC,MAAM,UAC3C,2BAAOA,MAAM,UACX,4BACE,oCACA,gDACA,+CACA,oDACA,6CAGJ,2BAAOA,MAAM,UACVtB,GACCA,EAAKe,WACFQ,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,KAAKC,cAAcF,EAAEC,SACtCE,UACAd,KAAI,SAACe,EAAOb,GAAR,OACH,wBACEE,IAAKF,EACLc,QAASd,EAAQ,IAAM,EAAI,QAAU,aAErC,4BAAKa,EAAMH,MACX,4BAAKG,EAAME,MACX,4BAAKF,EAAMG,KACX,4BAAKH,EAAMI,KACX,4BAAKJ,EAAMK,cAQ3B,SCvGdC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.b84b5afb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider, Query } from 'react-apollo';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst getDepartmentsQuery = gql`\n  query DepartmentsQuery {\n    departments {\n      department_number\n    }\n  }\n`;\n\nconst departmentQuery = gql`\n  query DepartmentQuery($department_number: ID!) {\n    department(department_number: $department_number) {\n      date\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nfunction App() {\n  const [departmentNumber, setDepartmentNumber] = useState('');\n  return (\n    <ApolloProvider client={client}>\n      <div className='App'>\n        <h1>COVID France API</h1>\n\n        <Query query={getDepartmentsQuery}>\n          {({ loading, error, data }) => {\n            if (loading) return <p>loading...</p>;\n            if (error) console.log(error);\n            return (\n              <select\n                style={{\n                  background: 'none',\n                  border: 'solid 2px black',\n                  margin: '24px',\n                  padding: '4px 16px',\n                }}\n                value={departmentNumber}\n                onChange={(e) => setDepartmentNumber(e.target.value)}\n              >\n                <option value='' disabled>\n                  Choose a department\n                </option>\n                {data &&\n                  data.departments.map((department, index) => (\n                    <option value={department.department_number} key={index}>\n                      {department.department_number}\n                    </option>\n                  ))}\n              </select>\n            );\n          }}\n        </Query>\n        <div>\n          {departmentNumber ? (\n            <Query\n              query={departmentQuery}\n              variables={{ department_number: departmentNumber }}\n            >\n              {({ loading, error, data }) => {\n                if (loading) return <p>loading...</p>;\n                if (error) console.log(error);\n                return (\n                  <table cellPadding='4' cellSpacing='0' align='center'>\n                    <thead align='center'>\n                      <tr>\n                        <td>Date</td>\n                        <td>Hospitalisations</td>\n                        <td>Réanimations</td>\n                        <td>Retour à domicile</td>\n                        <td>Décès</td>\n                      </tr>\n                    </thead>\n                    <tbody align='center'>\n                      {data &&\n                        data.department\n                          .sort((a, b) => a.date.localeCompare(b.date))\n                          .reverse()\n                          .map((entry, index) => (\n                            <tr\n                              key={index}\n                              bgcolor={index % 2 === 0 ? 'white' : 'lightgrey'}\n                            >\n                              <td>{entry.date}</td>\n                              <td>{entry.hosp}</td>\n                              <td>{entry.rea}</td>\n                              <td>{entry.rad}</td>\n                              <td>{entry.dc}</td>\n                            </tr>\n                          ))}\n                    </tbody>\n                  </table>\n                );\n              }}\n            </Query>\n          ) : null}\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}