{"version":3,"sources":["components/GeoMap.js","useResizeObserver.js","App.js","index.js"],"names":["geoPoint2D","data","features","map","feature","lon","lat","points","geometry","coordinates","forEach","polygon","pair","length","point","code","properties","GeoMap","cases","property","wrapperRef","useRef","svgRef","dimensions","ref","useState","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","entry","contentRect","observe","unobserve","useResizeObserver","selectedDepartment","setSelectedDepartment","firstDay","Date","date","lastDay","setDate","svg","select","maxProp","min","dep","max","getBoundingClientRect","width","height","projection","geoMercator","fitSize","precision","pathGenerator","geoPath","selectAll","join","on","attr","transition","text","id","report","filter","department_number","getDate","nom","hosp","rea","rad","dc","style","department","className","toDateString","type","value","onChange","e","days","target","client","ApolloClient","uri","departmentsQuery","gql","departmentQuery","App","departmentNumber","setDepartmentNumber","setProperty","query","loading","error","console","log","background","border","margin","padding","disabled","departments","index","key","variables","cellPadding","cellSpacing","align","sort","a","b","localeCompare","reverse","bgcolor","placeSelf","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iq9hCAMMA,EAAaC,EAAKC,SAASC,KAAI,SAACC,GACpC,IAAIC,EAAM,EACNC,EAAM,EACNC,EAAS,EAgBb,OAfAH,EAAQI,SAASC,YAAYC,SAAQ,SAACC,GACpCA,EAAQD,SAAQ,SAACE,GACK,IAAhBA,EAAKC,OACPD,EAAKF,SAAQ,SAACI,GACZT,GAAOS,EAAM,GACbR,GAAOQ,EAAM,GACbP,QAGFF,GAAOO,EAAK,GACZN,GAAOM,EAAK,GACZL,WAIC,CACLQ,KAAMX,EAAQY,WAAWD,KACzBD,MAAO,CAACT,EAAME,EAAQD,EAAMC,OAwIjBU,EApIA,SAAC,GAA+B,IAA7BF,EAA4B,EAA5BA,KAAMG,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACvBC,EAAaC,mBACbC,EAASD,mBACTE,EChCO,SAACC,GAAS,IAAD,EACcC,mBAAS,MADvB,mBACfF,EADe,KACHG,EADG,KActB,OAZAC,qBAAU,WACR,IAAMC,EAAgBJ,EAAIK,QACpBC,EAAiB,IAAIC,gBAAe,SAACC,GACzCA,EAAQtB,SAAQ,SAACuB,GACfP,EAAcO,EAAMC,mBAIxB,OADAJ,EAAeK,QAAQP,GAChB,WACLE,EAAeM,UAAUR,MAE1B,CAACJ,IACGD,EDkBYc,CAAkBjB,GAHO,EAIQK,mBAAS,MAJjB,mBAIrCa,EAJqC,KAIjBC,EAJiB,KAKrCC,EACL,IAAIC,KAAKvB,EAAM,GAAGwB,MADHC,EAEf,IAAIF,KAAKvB,EAAMA,EAAML,OAAS,GAAG6B,MAPS,EASpBjB,mBAASkB,GATW,mBASrCD,EATqC,KAS/BE,EAT+B,KA6G5C,OAlGAjB,qBAAU,WACR,IAAMkB,EAAMC,YAAOxB,EAAOO,SAGpBkB,GADUC,YAAI9B,GAAO,SAAC+B,GAAD,OAASA,EAAI9B,MACxB+B,YAAIhC,GAAO,SAAC+B,GAAD,OAASA,EAAI9B,OAJ1B,EAOZI,GAAcH,EAAWS,QAAQsB,wBAD3BC,EANM,EAMNA,MAAOC,EAND,EAMCA,OAGTC,EAAaC,cAChBC,QAAQ,CAACJ,EAAOC,GAASf,GAAsBrC,GAC/CwD,UAAU,KACPC,EAAgBC,cAAUL,WAAWA,GAE3CT,EACGe,UAAU,eACV3D,KAAKA,EAAKC,UACV2D,KAAK,QACLC,GAAG,SAAS,SAAC1D,GACZmC,EAAsBD,IAAuBlC,EAAU,KAAOA,MAE/D2D,KAAK,QAAS,cACdC,aACAD,KAAK,QAAQ,SAAC3D,GAAD,OACZA,EAAQY,WAAWD,OAASA,EAAO,MAAQ,eAE5CgD,KAAK,KAAK,SAAC3D,GAAD,OAAasD,EAActD,MAGxCyC,EACGe,UAAU,UACV3D,KAAK,CAACqC,IACNuB,KAAK,QACLE,KAAK,QAAS,SACdC,aACAC,MAAK,SAAC7D,GACL,GAAIA,EAAS,CACX,IAAM8D,EAAK9D,EAAQY,WAAWD,KACxBoD,EAASjD,EAAMkD,QAAO,SAACnB,GAC3B,OACEA,EAAIoB,oBAAsBH,GAC1B,IAAIzB,KAAKQ,EAAIP,MAAM4B,YAAc5B,EAAK4B,aAEvC,GACH,OACElE,GACAA,EAAQY,WAAWuD,IAAnBnE,aAGE+D,EAAOK,KACP,WACAL,EAAOM,IACP,WACAN,EAAOO,IACP,UACAP,EAAOQ,OAIdZ,KAAK,IAAK,IACVA,KAAK,IAAK,IAGblB,EACGe,UAAU,WACV3D,KAAKD,GACL6D,KAAK,UACLE,KAAK,QAAS,UACdA,KAAK,MAAM,SAAC3D,GAAD,OAAakD,EAAWlD,EAAQU,OAAO,MAClDiD,KAAK,MAAM,SAAC3D,GAAD,OAAakD,EAAWlD,EAAQU,OAAO,MAClD8D,MAAM,SAAU,WAChBd,GAAG,SAAS,SAAChD,GACZ,IAAMoD,EAAKpD,EAAMC,KACX8D,EAAa5E,EAAKC,SAASkE,QAC/B,SAAChE,GAAD,OAAaA,EAAQY,WAAWD,OAASmD,KACzC,GACF3B,EACED,IAAuBuC,EAAa,KAAOA,MAG9Cb,aACAD,KAAK,KAAK,SAAC3D,GACV,GAAIe,EAAU,CACZ,IAAM+C,EAAK9D,EAAQW,KAOnB,OAAQ,IANEG,EAAMkD,QAAO,SAACnB,GACtB,OACEA,EAAIoB,oBAAsBH,GAC1B,IAAIzB,KAAKQ,EAAIP,MAAM4B,YAAc5B,EAAK4B,aAEvC,GAAGnD,GACa4B,EACd,OAAO,KAEfgB,KAAK,YAAa,yBAClBA,KAAK,OAAQ,QACba,MAAM,UAAW,MACnB,CAAC3E,EAAMyC,EAAM3B,EAAMQ,EAAYe,EAAoBnB,IAGpD,yBAAK2D,UAAU,eACb,yBAAKA,UAAU,UAAUtD,IAAKJ,GAC5B,yBAAKI,IAAKF,KAEZ,+BAAQoB,EAAKqC,gBACb,2BACEC,KAAK,QACLhC,IAAI,IACJE,IAAI,MACJ+B,MAA4B,KAAnBvC,EAAOF,IAAoBG,EAAUH,GAC9C0C,SAAU,SAACC,GACT,IAAMC,EACFD,EAAEE,OAAOJ,MAAQ,KAAQtC,EAAUH,GAAa,MAChDE,EAAO,IAAID,KAAKD,GACpBE,EAAKE,QAAQF,EAAK4B,UAAYc,GAC9BxC,EAAQF,Q,idErJlB,IAAM4C,EAAS,IAAIC,IAAa,CAC9BC,IAAK,aAGDC,EAAmBC,YAAH,KAahBC,EAAkBD,YAAH,KAyINE,MA7Hf,WAAgB,IAAD,EACmCnE,mBAAS,IAD5C,mBACNoE,EADM,KACYC,EADZ,OAEmBrE,mBAAS,IAF5B,mBAENN,EAFM,KAEI4E,EAFJ,KAGb,OACE,kBAAC,IAAD,CAAgBT,OAAQA,GACtB,yBAAKR,UAAU,aACb,yBAAKA,UAAU,UACb,gDACA,kBAAC,IAAD,CAAOkB,MAAOP,IACX,YAA+B,IAA5BQ,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOjG,EAAW,EAAXA,KAClB,OAAIgG,EAAgB,0CAChBC,GAAOC,QAAQC,IAAIF,GAErB,4BACEtB,MAAO,CACLyB,WAAY,OACZC,OAAQ,kBACRC,OAAQ,OACRC,QAAS,YAEXvB,MAAOY,EACPX,SAAU,SAACC,GAAD,OAAOW,EAAoBX,EAAEE,OAAOJ,SAE9C,4BAAQA,MAAM,GAAGwB,UAAQ,GAAzB,uBAGCxG,GACCA,EAAKyG,YAAYvG,KAAI,SAAC0E,EAAY8B,GAAb,OACnB,4BAAQ1B,MAAOJ,EAAWR,kBAAmBuC,IAAKD,GAC/C9B,EAAWR,4BAQ5B,yBAAKS,UAAU,iBACZe,EACC,kBAAC,IAAD,CACEG,MAAOL,EACPkB,UAAW,CAAExC,kBAAmBwB,KAE/B,YAA+B,IAA5BI,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOjG,EAAW,EAAXA,KAClB,OAAIgG,EAAgB,0CAChBC,GAAOC,QAAQC,IAAIF,GAErB,2BACEY,YAAY,MACZR,OAAO,IACPS,YAAY,IACZC,MAAM,UAEN,2BAAOA,MAAM,UACX,4BACE,oCACA,gDACA,+CACA,oDACA,6CAGJ,2BAAOA,MAAM,UACV/G,GACCA,EAAK4E,WACFoC,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAExE,KAAK0E,cAAcD,EAAEzE,SACtC2E,UACAlH,KAAI,SAAC8B,EAAO0E,GAAR,OACH,wBACEC,IAAKD,EACLW,QAASX,EAAQ,IAAM,EAAI,QAAU,aAErC,4BAAK1E,EAAMS,MACX,4BAAKT,EAAMuC,MACX,4BAAKvC,EAAMwC,KACX,4BAAKxC,EAAMyC,KACX,4BAAKzC,EAAM0C,cAQ3B,MAEN,4BACEM,MAAO9D,EACP+D,SAAU,SAACC,GAAD,OAAOY,EAAYZ,EAAEE,OAAOJ,QACtCL,MAAO,CACLyB,WAAY,OACZC,OAAQ,kBACRC,OAAQ,OACRC,QAAS,WACTe,UAAW,kBAGb,4BAAQtC,MAAM,GAAGwB,UAAQ,GAAzB,qBAGA,4BAAQxB,MAAM,QAAd,oBACA,4BAAQA,MAAM,OAAd,wBACA,4BAAQA,MAAM,OAAd,mBACA,4BAAQA,MAAM,MAAd,gBAEF,yBAAKH,UAAU,OACb,kBAAC,IAAD,CAAOkB,MAAOP,IACX,YAA+B,IAA5BQ,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,MAAOjG,EAAW,EAAXA,KAClB,OAAIgG,EAAgB,0CAChBC,GAAOC,QAAQC,IAAIF,GAErB,kBAAC,EAAD,CACEnF,KAAM8E,EACN3E,MAAOjB,EAAKyG,YACZvF,SAAUA,YClJ5BqG,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.57d4d158.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\nimport data from '../departements.geo.json';\n\n// calculate longitude and latitude of each department\nconst geoPoint2D = data.features.map((feature) => {\n  let lon = 0;\n  let lat = 0;\n  let points = 0;\n  feature.geometry.coordinates.forEach((polygon) => {\n    polygon.forEach((pair) => {\n      if (pair.length !== 2) {\n        pair.forEach((point) => {\n          lon += point[0];\n          lat += point[1];\n          points++;\n        });\n      } else {\n        lon += pair[0];\n        lat += pair[1];\n        points++;\n      }\n    });\n  });\n  return {\n    code: feature.properties.code,\n    point: [lon / points, lat / points],\n  };\n});\n\nconst GeoMap = ({ code, cases, property }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n  const [firstDay, lastDay] = [\n    new Date(cases[0].date),\n    new Date(cases[cases.length - 1].date),\n  ];\n  const [date, setDate] = useState(lastDay);\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const minProp = min(cases, (dep) => dep[property]);\n    const maxProp = max(cases, (dep) => dep[property]);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoMercator()\n      .fitSize([width, height], selectedDepartment || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    svg\n      .selectAll('.department')\n      .data(data.features)\n      .join('path')\n      .on('click', (feature) => {\n        setSelectedDepartment(selectedDepartment === feature ? null : feature);\n      })\n      .attr('class', 'department')\n      .transition()\n      .attr('fill', (feature) =>\n        feature.properties.code === code ? 'red' : 'lightgrey'\n      )\n      .attr('d', (feature) => pathGenerator(feature));\n\n    // add labels\n    svg\n      .selectAll('.label')\n      .data([selectedDepartment])\n      .join('text')\n      .attr('class', 'label')\n      .transition()\n      .text((feature) => {\n        if (feature) {\n          const id = feature.properties.code;\n          const report = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              new Date(dep.date).getDate() === date.getDate()\n            );\n          })[0];\n          return (\n            feature &&\n            feature.properties.nom +\n              ' ' +\n              ' - hosp: ' +\n              report.hosp +\n              ' - rea: ' +\n              report.rea +\n              ' - rad: ' +\n              report.rad +\n              ' - dc: ' +\n              report.dc\n          );\n        }\n      })\n      .attr('x', 10)\n      .attr('y', 25);\n\n    // draw circles for each department\n    svg\n      .selectAll('.circle')\n      .data(geoPoint2D)\n      .join('circle')\n      .attr('class', 'circle')\n      .attr('cx', (feature) => projection(feature.point)[0])\n      .attr('cy', (feature) => projection(feature.point)[1])\n      .style('cursor', 'pointer')\n      .on('click', (point) => {\n        const id = point.code;\n        const department = data.features.filter(\n          (feature) => feature.properties.code === id\n        )[0];\n        setSelectedDepartment(\n          selectedDepartment === department ? null : department\n        );\n      })\n      .transition()\n      .attr('r', (feature) => {\n        if (property) {\n          const id = feature.code;\n          const r = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              new Date(dep.date).getDate() === date.getDate()\n            );\n          })[0][property];\n          return (100 * r) / maxProp;\n        } else return 0;\n      })\n      .attr('translate', 'transform(-50%, -50%)')\n      .attr('fill', 'blue')\n      .style('opacity', 0.2);\n  }, [data, date, code, dimensions, selectedDepartment, property]);\n\n  return (\n    <div className='map-content'>\n      <div className='wrapper' ref={wrapperRef}>\n        <svg ref={svgRef}></svg>\n      </div>\n      <label>{date.toDateString()}</label>\n      <input\n        type='range'\n        min='0'\n        max='100'\n        value={((date - firstDay) * 100) / (lastDay - firstDay)}\n        onChange={(e) => {\n          const days =\n            ((e.target.value / 100) * (lastDay - firstDay)) / 86400000;\n          let date = new Date(firstDay);\n          date.setDate(date.getDate() + days);\n          setDate(date);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default GeoMap;\n","import { useState, useEffect } from 'react';\n\nexport default (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import React, { useState } from 'react';\nimport ApolloClient, { gql } from 'apollo-boost';\nimport { ApolloProvider, Query } from 'react-apollo';\nimport GeoMap from './components/GeoMap';\n\nimport './App.css';\n\nconst client = new ApolloClient({\n  uri: '/graphql',\n});\n\nconst departmentsQuery = gql`\n  query DepartmentsQuery {\n    departments {\n      department_number\n      hosp\n      rea\n      rad\n      dc\n      date\n    }\n  }\n`;\n\nconst departmentQuery = gql`\n  query DepartmentQuery($department_number: ID!) {\n    department(department_number: $department_number) {\n      date\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nfunction App() {\n  const [departmentNumber, setDepartmentNumber] = useState('');\n  const [property, setProperty] = useState('');\n  return (\n    <ApolloProvider client={client}>\n      <div className='container'>\n        <div className='header'>\n          <h1>COVID France API</h1>\n          <Query query={departmentsQuery}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>loading...</p>;\n              if (error) console.log(error);\n              return (\n                <select\n                  style={{\n                    background: 'none',\n                    border: 'solid 2px black',\n                    margin: '24px',\n                    padding: '4px 16px',\n                  }}\n                  value={departmentNumber}\n                  onChange={(e) => setDepartmentNumber(e.target.value)}\n                >\n                  <option value='' disabled>\n                    Choose a department\n                  </option>\n                  {data &&\n                    data.departments.map((department, index) => (\n                      <option value={department.department_number} key={index}>\n                        {department.department_number}\n                      </option>\n                    ))}\n                </select>\n              );\n            }}\n          </Query>\n        </div>\n        <div className='table-wrapper'>\n          {departmentNumber ? (\n            <Query\n              query={departmentQuery}\n              variables={{ department_number: departmentNumber }}\n            >\n              {({ loading, error, data }) => {\n                if (loading) return <p>loading...</p>;\n                if (error) console.log(error);\n                return (\n                  <table\n                    cellPadding='4px'\n                    border='1'\n                    cellSpacing='0'\n                    align='center'\n                  >\n                    <thead align='center'>\n                      <tr>\n                        <td>Date</td>\n                        <td>Hospitalisations</td>\n                        <td>Réanimations</td>\n                        <td>Retour à domicile</td>\n                        <td>Décès</td>\n                      </tr>\n                    </thead>\n                    <tbody align='center'>\n                      {data &&\n                        data.department\n                          .sort((a, b) => a.date.localeCompare(b.date))\n                          .reverse()\n                          .map((entry, index) => (\n                            <tr\n                              key={index}\n                              bgcolor={index % 2 === 0 ? 'white' : 'lightgrey'}\n                            >\n                              <td>{entry.date}</td>\n                              <td>{entry.hosp}</td>\n                              <td>{entry.rea}</td>\n                              <td>{entry.rad}</td>\n                              <td>{entry.dc}</td>\n                            </tr>\n                          ))}\n                    </tbody>\n                  </table>\n                );\n              }}\n            </Query>\n          ) : null}\n        </div>\n        <select\n          value={property}\n          onChange={(e) => setProperty(e.target.value)}\n          style={{\n            background: 'none',\n            border: 'solid 2px black',\n            margin: '24px',\n            padding: '4px 16px',\n            placeSelf: 'center center',\n          }}\n        >\n          <option value='' disabled>\n            Select a property\n          </option>\n          <option value='hosp'>Hospitalisations</option>\n          <option value='rad'>Retour à domicile</option>\n          <option value='rea'>Réanimations</option>\n          <option value='dc'>Décès</option>\n        </select>\n        <div className='map'>\n          <Query query={departmentsQuery}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>loading...</p>;\n              if (error) console.log(error);\n              return (\n                <GeoMap\n                  code={departmentNumber}\n                  cases={data.departments}\n                  property={property}\n                />\n              );\n            }}\n          </Query>\n        </div>\n      </div>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}