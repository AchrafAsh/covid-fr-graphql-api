{"version":3,"sources":["useResizeObserver.js","components/GeoMap.js","components/GenderPlot.js","App.js","index.js"],"names":["ref","useState","dimensions","setDimensions","useEffect","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","GeoMap","code","cases","property","formatDate","date","setDate","wrapperRef","useRef","svgRef","useResizeObserver","selectedDepartment","setSelectedDepartment","length","firstDay","lastDay","tooltips","document","querySelectorAll","i","remove","svg","select","tooltip","append","attr","maxProp","max","dep","colorScale","scaleLinear","domain","range","getBoundingClientRect","width","height","projection","geoMercator","fitSize","data","precision","pathGenerator","geoPath","selectAll","features","join","on","feature","style","event","offsetY","offsetX","html","id","properties","report","filter","department_number","toDateString","nom","hosp","rea","rad","dc","transition","geopoint2d","r","Math","sqrt","beds","className","display","flexDirection","alignItems","padding","type","min","value","onChange","e","days","target","Date","getDate","GenderPlot","dateToString","toString","gender","d","margin","xMax","clamp","xScale","yScale","scaleBand","map","rangeRound","paddingInner","bandwidth","xAxis","axisBottom","ticks","call","yAxis","axisLeft","tickSize","departmentsQuery","gql","genderQuery","departmentListQuery","dailyReportQuery","departmentQuery","App","dd","mm","getMonth","getFullYear","departmentNumber","setDepartmentNumber","setProperty","useQuery","variables","loading","error","reportLoading","reportData","genderLoading","genderData","Container","maxWidth","Row","Col","Card","overflow","Table","Spinner","reduce","total","background","border","placeSelf","disabled","departments","includes","b","split","genders","query","console","log","department","key","align","sort","a","localeCompare","reverse","index","href","client","ApolloClient","uri","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.449c260d.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default (ref) => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport { select, geoPath, geoMercator, max, scaleLinear, event } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\nimport data from '../departments.geo.json';\n\nconst GeoMap = ({ code, cases, property, formatDate, date, setDate }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  const [selectedDepartment, setSelectedDepartment] = useState(null);\n  let [firstDay, lastDay] = [\n    formatDate(cases[0].date),\n    formatDate(cases[cases.length - 1].date),\n  ];\n\n  useEffect(() => {\n    const tooltips = document.querySelectorAll('.tooltip');\n    for (let i = 0; i < tooltips.length; i++) {\n      tooltips[i].remove();\n    }\n\n    const svg = select(svgRef.current);\n    const wrapper = select(wrapperRef.current);\n    const tooltip = wrapper.append('div').attr('class', 'tooltip');\n\n    const maxProp = max(cases, (dep) => dep[property]);\n\n    const colorScale = scaleLinear()\n      .domain([0, 1, 2])\n      .range(['#2ecc71', '#c23616']);\n\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    const projection = geoMercator()\n      .fitSize([width, height], selectedDepartment || data)\n      .precision(100);\n    const pathGenerator = geoPath().projection(projection);\n\n    // draw the map\n    svg\n      .selectAll('.department')\n      .data(data.features)\n      .join('path')\n      .on('click', (feature) => {\n        setSelectedDepartment(selectedDepartment === feature ? null : feature);\n      })\n      .on('mouseenter', function (feature) {\n        tooltip\n          .style('opacity', '1')\n          .style('top', `${event.offsetY + 30}px`)\n          .style('left', `${event.offsetX + 50}px`)\n          .html(() => {\n            if (feature) {\n              const id = feature.properties.code;\n              const report = cases.filter((dep) => {\n                return (\n                  dep.department_number === id &&\n                  formatDate(dep.date).toDateString() === date.toDateString()\n                );\n              })[0];\n              return (\n                feature &&\n                '<table class=\"table\"><thead><h6>' +\n                  feature.properties.nom +\n                  '</h6></thead>' +\n                  '<tbody><tr><td>hospitalisation</td><td>' +\n                  report.hosp +\n                  '</td><tr><td>réanimation</td><td>' +\n                  report.rea +\n                  '</td></tr><tr><td>retour à domicile</td><td>' +\n                  report.rad +\n                  '</td></tr><tr><td>décès</td><td>' +\n                  report.dc +\n                  '</td></tr></tbody></table>'\n              );\n            }\n          });\n      })\n      .on('mouseleave', (feature) => {\n        tooltip.style('opacity', 0).html('');\n      })\n      .attr('class', 'department')\n      .transition()\n      .attr('fill', (feature) =>\n        feature.properties.code === code ? '#4455ab' : '#d1d5ea'\n      )\n      .attr('stroke', 'rgb(188, 192, 211)')\n      .style('opacity', 0.8)\n      .attr('d', (feature) => pathGenerator(feature));\n\n    // draw circles for each department\n    svg\n      .selectAll('.circle')\n      .data(data.features)\n      .join('circle')\n      .attr('class', 'circle')\n      .attr('cx', (feature) => projection(feature.properties.geopoint2d)[0])\n      .attr('cy', (feature) => projection(feature.properties.geopoint2d)[1])\n      .style('cursor', 'pointer')\n      .on('click', (feature) => {\n        setSelectedDepartment(selectedDepartment === feature ? null : feature);\n      })\n      .transition()\n      .attr('r', (feature) => {\n        if (property) {\n          const id = feature.properties.code;\n          const r = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              formatDate(dep.date).toDateString() === date.toDateString()\n            );\n          })[0][property];\n          return Math.sqrt((2000 * r) / maxProp);\n        } else return 0;\n      })\n      .attr('translate', 'transform(-50%, -50%)')\n      .attr('fill', (feature) => {\n        if (property !== 'rad' && property !== 'dc') {\n          const id = feature.properties.code;\n          const r = cases.filter((dep) => {\n            return (\n              dep.department_number === id &&\n              formatDate(dep.date).toDateString() === date.toDateString()\n            );\n          })[0][property];\n          return colorScale(r / feature.properties.beds);\n        } else {\n          return property === 'dc' ? '#2980b9' : '#27ae60';\n        }\n      })\n      .style('opacity', 0.4);\n  }, [data, date, code, dimensions, selectedDepartment, property]);\n\n  return (\n    <div className=\"map-content\">\n      <div className=\"wrapper\" ref={wrapperRef}>\n        <svg ref={svgRef}></svg>\n      </div>\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          padding: '16px',\n        }}\n      >\n        <label>{date.toDateString()}</label>\n        <input\n          type=\"range\"\n          min=\"0\"\n          max=\"100\"\n          value={((date - firstDay) * 100) / (lastDay - firstDay)}\n          onChange={(e) => {\n            const days =\n              ((e.target.value / 100) * (lastDay - firstDay)) / 86400000;\n            let date = new Date(firstDay);\n            date.setDate(date.getDate() + days);\n            setDate(date);\n          }}\n        />\n        <small>\n          <i>\n            {property === 'hosp'\n              ? 'rouge: capacité hospitalière excédée / vert: capacité hospitalière respectée'\n              : null}\n          </i>\n        </small>\n      </div>\n    </div>\n  );\n};\n\nexport default GeoMap;\n","import React, { useRef, useEffect } from 'react';\nimport { select, scaleBand, scaleLinear, max, axisBottom, axisLeft } from 'd3';\nimport useResizeObserver from '../useResizeObserver';\n\nconst GenderPlot = ({ code, cases, property, date, dateToString }) => {\n  const wrapperRef = useRef();\n  const svgRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  useEffect(() => {\n    let data = [];\n    if (code && property) {\n      data = cases.filter(\n        (entry) =>\n          entry.date === dateToString(date) &&\n          entry.department_number.toString() === code.toString()\n      );\n    } else if (property) {\n      data = [{ gender: 0 }, { gender: 1 }, { gender: 2 }];\n      data[0][property] = 0;\n      data[1][property] = 0;\n      data[2][property] = 0;\n      for (let i = 0; i < cases.length; i++) {\n        let d = cases[i];\n        if (d.date === dateToString(date)) {\n          data[d.gender][property] += d[property];\n        }\n      }\n    }\n\n    let svg = select(svgRef.current);\n\n    let { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // margin convention often used with D3\n    const margin = { top: 0, right: 0, bottom: 20, left: 40 };\n    width = width - margin.left - margin.right;\n    height = height - margin.top - margin.bottom;\n\n    // scales\n    const xMax = max(data, (d) => d[property]);\n\n    const colorScale = scaleLinear()\n      .domain([0, (xMax * 2) / 3, xMax])\n      .range(['green', 'orange', 'red'])\n      .clamp(true);\n\n    const xScale = scaleLinear().domain([0, xMax]).range([0, width]);\n\n    const yScale = scaleBand()\n      .domain(data.map((d) => d.gender))\n      .rangeRound([0, height])\n      .paddingInner(0.25);\n\n    // draw bars\n    svg\n      .selectAll('.bar')\n      .data(data)\n      .join('rect')\n      .attr('class', 'bar')\n      .attr('y', (d) => yScale(d.gender))\n      .attr('x', 3 + margin.left / 3)\n      .transition()\n      .attr('height', yScale.bandwidth())\n      .attr('width', (d) => xScale(d[property]))\n      .style('fill', (d) => colorScale(d[property]));\n\n    // draw axes\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    svg\n      .select('.x-axis')\n      .style(\n        'transform',\n        `translate(${3 + margin.left / 3}px, ${height + 3}px)`\n      )\n      .call(xAxis);\n\n    const yAxis = axisLeft(yScale).tickSize(0);\n    svg\n      .select('.y-axis')\n      .style('transform', `translateX(${margin.left / 3}px)`)\n      .call(yAxis);\n  }, [dimensions, cases, date, property, code]);\n\n  return (\n    <div ref={wrapperRef}>\n      <svg ref={svgRef}>\n        <g className=\"x-axis\" />\n        <g className=\"y-axis\" />\n      </svg>\n    </div>\n  );\n};\n\nexport default GenderPlot;\n","import React, { useState } from 'react';\nimport { gql } from 'apollo-boost';\nimport { Query, useQuery } from 'react-apollo';\nimport { Container, Row, Col, Spinner, Table, Card } from 'reactstrap';\n\nimport GeoMap from './components/GeoMap';\nimport GenderPlot from './components/GenderPlot';\nimport './App.css';\n\nconst departmentsQuery = gql`\n  query DepartmentsQuery {\n    departments {\n      department_number\n      hosp\n      rea\n      rad\n      dc\n      date\n    }\n  }\n`;\n\nconst genderQuery = gql`\n  query GenderQuery {\n    genders {\n      gender\n      date\n      department_number\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nconst departmentListQuery = gql`\n  query DepartmentsQuery {\n    date(date: \"2020-06-25\") {\n      department_number\n    }\n  }\n`;\n\nconst dailyReportQuery = gql`\n  query DailyReportQuery($date: String!) {\n    date(date: $date) {\n      department_number\n      hosp\n      rea\n      rad\n      dc\n      date\n    }\n  }\n`;\n\nconst departmentQuery = gql`\n  query DepartmentQuery($department_number: ID!) {\n    department(department_number: $department_number) {\n      date\n      hosp\n      rea\n      rad\n      dc\n    }\n  }\n`;\n\nfunction App() {\n  const formatDate = (date) => {\n    if (date.includes('/')) {\n      const b = date.split('/');\n      return new Date(`${b[2]}-${b[1]}-${b[0]}`);\n    } else {\n      return new Date(date);\n    }\n  };\n\n  const dateToString = (date) => {\n    var dd = date.getDate();\n\n    var mm = date.getMonth() + 1;\n    var yyyy = date.getFullYear();\n    if (dd < 10) {\n      dd = '0' + dd;\n    }\n\n    if (mm < 10) {\n      mm = '0' + mm;\n    }\n    return yyyy + '-' + mm + '-' + dd;\n  };\n\n  const [departmentNumber, setDepartmentNumber] = useState('');\n  const [property, setProperty] = useState('');\n  const [date, setDate] = useState(new Date('2020-06-29'));\n  const { loading, data, error } = useQuery(dailyReportQuery, {\n    variables: { date: dateToString(date) },\n  });\n\n  const {\n    loading: reportLoading,\n    data: reportData,\n    error: reportError,\n  } = useQuery(departmentsQuery);\n\n  const {\n    loading: genderLoading,\n    data: genderData,\n    error: genderError,\n  } = useQuery(genderQuery);\n\n  return (\n    <div className=\"app-container\">\n      <Container style={{ maxWidth: 'none' }}>\n        <Row className=\"px-3 pt-3 text-center\">\n          <Col>\n            <h1>Données du COVID-19 en France</h1>\n          </Col>\n        </Row>\n        <Row className=\"p-3\">\n          <Col>\n            <Card className=\"p-3\">\n              <Row>\n                <Col className=\"p-4\">\n                  <div\n                    style={{\n                      maxWidth: '100vh',\n                      overflow: 'auto',\n                    }}\n                  >\n                    <Table className=\"overflow-auto\">\n                      <thead>\n                        <h3>Total au {date.toDateString()}</h3>\n                      </thead>\n                      <tbody>\n                        <tr>\n                          <td>Hospitalisations</td>\n                          <td>\n                            {loading ? (\n                              <Spinner />\n                            ) : data ? (\n                              data.date.reduce(\n                                (total, dep) => total + dep.hosp,\n                                0\n                              )\n                            ) : null}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>Retour à domicile (cumulés)</td>\n                          <td>\n                            {loading ? (\n                              <Spinner />\n                            ) : data ? (\n                              data.date.reduce(\n                                (total, dep) => total + dep.rad,\n                                0\n                              )\n                            ) : null}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>Réanimations</td>\n                          <td>\n                            {loading ? (\n                              <Spinner />\n                            ) : data ? (\n                              data.date.reduce(\n                                (total, dep) => total + dep.rea,\n                                0\n                              )\n                            ) : null}\n                          </td>\n                        </tr>\n                        <tr>\n                          <td>Décès (cumulés)</td>\n                          <td>\n                            {loading ? (\n                              <Spinner />\n                            ) : data ? (\n                              data.date.reduce(\n                                (total, dep) => total + dep.dc,\n                                0\n                              )\n                            ) : null}\n                          </td>\n                        </tr>\n                      </tbody>\n                    </Table>\n                  </div>\n                </Col>\n                <Col>\n                  <Container className=\"p-4 text-center\">\n                    <select\n                      value={property}\n                      onChange={(e) => setProperty(e.target.value)}\n                      style={{\n                        background: 'none',\n                        border: 'solid 2px black',\n                        padding: '4px 16px',\n                        placeSelf: 'center center',\n                      }}\n                    >\n                      <option value=\"\" disabled>\n                        Select a property\n                      </option>\n                      <option value=\"hosp\">Hospitalisations</option>\n                      <option value=\"rad\">Retour à domicile</option>\n                      <option value=\"rea\">Réanimations</option>\n                      <option value=\"dc\">Décès</option>\n                    </select>\n                  </Container>\n                  {reportLoading ? (\n                    <Spinner />\n                  ) : reportData ? (\n                    <GeoMap\n                      code={departmentNumber}\n                      cases={reportData.departments}\n                      property={property}\n                      formatDate={formatDate}\n                      date={date}\n                      setDate={setDate}\n                    />\n                  ) : null}\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"p-3\">\n          <Col>\n            <Card className=\"p-3\">\n              <Row className=\"py-4\">\n                <Col>\n                  <h5>Répartition homme/femme</h5>\n                </Col>\n              </Row>\n              <Row>\n                <Col>\n                  {genderLoading ? (\n                    <Spinner />\n                  ) : genderData ? (\n                    <GenderPlot\n                      code={departmentNumber}\n                      cases={genderData.genders}\n                      property={property}\n                      dateToString={dateToString}\n                      date={date}\n                    />\n                  ) : null}\n                </Col>\n              </Row>\n              <Row>\n                <Col className=\"p-3 text-center\">\n                  <small>\n                    <i>0: total - 1: homme - 2: femme</i>\n                  </small>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        </Row>\n        <Row className=\"p-3\">\n          <Col>\n            <Card className=\"p-3\">\n              <Query query={departmentListQuery}>\n                {({ loading, error, data }) => {\n                  if (loading) return <Spinner />;\n                  if (error) console.log(error);\n                  return (\n                    <select\n                      style={{\n                        background: 'none',\n                        border: 'solid 2px black',\n                        padding: '4px 16px',\n                      }}\n                      value={departmentNumber}\n                      onChange={(e) => setDepartmentNumber(e.target.value)}\n                    >\n                      <option value=\"\">Choose a department</option>\n                      {data &&\n                        data.date.map((department) => (\n                          <option\n                            value={department.department_number}\n                            key={department.department_number}\n                          >\n                            {department.department_number}\n                          </option>\n                        ))}\n                    </select>\n                  );\n                }}\n              </Query>\n              {departmentNumber ? (\n                <Query\n                  query={departmentQuery}\n                  variables={{ department_number: departmentNumber }}\n                >\n                  {({ loading, error, data }) => {\n                    if (loading) return <Spinner />;\n                    if (error) console.log(error);\n                    return (\n                      <Container className=\"p-4 overflow-auto\">\n                        <Table>\n                          <thead align=\"center\">\n                            <tr>\n                              <td>Date</td>\n                              <td>Hospitalisations</td>\n                              <td>Réanimations</td>\n                              <td>Retour à domicile (cumulés)</td>\n                              <td>Décès (cumulés)</td>\n                            </tr>\n                          </thead>\n                          <tbody align=\"center\">\n                            {data &&\n                              data.department\n                                .sort((a, b) => a.date.localeCompare(b.date))\n                                .reverse()\n                                .map((entry, index) => (\n                                  <tr key={index}>\n                                    <td>{entry.date}</td>\n                                    <td>{entry.hosp}</td>\n                                    <td>{entry.rea}</td>\n                                    <td>{entry.rad}</td>\n                                    <td>{entry.dc}</td>\n                                  </tr>\n                                ))}\n                          </tbody>\n                        </Table>\n                      </Container>\n                    );\n                  }}\n                </Query>\n              ) : null}\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n      <footer>\n        Built with ⚡ by{' '}\n        <a target=\"_blank\" href=\"https://achrafash.me\">\n          Achraf ASH\n        </a>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\",\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}